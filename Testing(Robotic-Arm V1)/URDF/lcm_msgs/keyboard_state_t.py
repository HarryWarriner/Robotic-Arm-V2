"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class keyboard_state_t(object):

    __slots__ = ["nkeys", "label", "state"]

    __typenames__ = ["int64_t", "string", "boolean"]

    __dimensions__ = [None, ["nkeys"], ["nkeys"]]

    def __init__(self):
        self.nkeys = 0
        """ LCM Type: int64_t """
        self.label = []
        """ LCM Type: string[nkeys] """
        self.state = []
        """ LCM Type: boolean[nkeys] """

    def encode(self):
        buf = BytesIO()
        buf.write(keyboard_state_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.nkeys))
        for i0 in range(self.nkeys):
            __label_encoded = self.label[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__label_encoded)+1))
            buf.write(__label_encoded)
            buf.write(b"\0")
        buf.write(struct.pack('>%db' % self.nkeys, *self.state[:self.nkeys]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != keyboard_state_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return keyboard_state_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = keyboard_state_t()
        self.nkeys = struct.unpack(">q", buf.read(8))[0]
        self.label = []
        for i0 in range(self.nkeys):
            __label_len = struct.unpack('>I', buf.read(4))[0]
            self.label.append(buf.read(__label_len)[:-1].decode('utf-8', 'replace'))
        self.state = [bool(x) for x in struct.unpack('>%db' % self.nkeys, buf.read(self.nkeys))]
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if keyboard_state_t in parents: return 0
        tmphash = (0xf176f52a45baccb2) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if keyboard_state_t._packed_fingerprint is None:
            keyboard_state_t._packed_fingerprint = struct.pack(">Q", keyboard_state_t._get_hash_recursive([]))
        return keyboard_state_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", keyboard_state_t._get_packed_fingerprint())[0]

