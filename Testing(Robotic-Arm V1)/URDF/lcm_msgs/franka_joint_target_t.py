"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class franka_joint_target_t(object):

    __slots__ = ["position"]

    __typenames__ = ["double"]

    __dimensions__ = [[7]]

    def __init__(self):
        self.position = [ 0.0 for dim0 in range(7) ]
        """ LCM Type: double[7] """

    def encode(self):
        buf = BytesIO()
        buf.write(franka_joint_target_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>7d', *self.position[:7]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != franka_joint_target_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return franka_joint_target_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = franka_joint_target_t()
        self.position = struct.unpack('>7d', buf.read(56))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if franka_joint_target_t in parents: return 0
        tmphash = (0x6f594023fe317ae3) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if franka_joint_target_t._packed_fingerprint is None:
            franka_joint_target_t._packed_fingerprint = struct.pack(">Q", franka_joint_target_t._get_hash_recursive([]))
        return franka_joint_target_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", franka_joint_target_t._get_packed_fingerprint())[0]

